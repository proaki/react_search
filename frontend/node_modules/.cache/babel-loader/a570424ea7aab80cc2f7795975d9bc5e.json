{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hiro\\\\react_project\\\\react_search\\\\react_search\\\\frontend\\\\src\\\\chat-bot\\\\chat-bot\\\\src\\\\components\\\\Forms\\\\FormDialog.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { TextInput } from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormDialog = props => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const inputName = useCallback(event => {\n    setName(event.target.value);\n  }, [setName]);\n  const inputEmail = useCallback(event => {\n    setEmail(event.target.value);\n  }, [setEmail]);\n  const inputDescription = useCallback(event => {\n    setDescription(event.target.value);\n  }, [setDescription]);\n\n  const validateEmailFormat = email => {\n    const regex = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    return regex.test(email);\n  };\n\n  const validateRequiredInput = (...args) => {\n    let isBlank = false;\n\n    for (let i = 0; i < args.length; i = i + 1 | 0) {\n      if (args[i] === \"\") {\n        isBlank = true;\n      }\n    }\n\n    return isBlank;\n  };\n\n  const submitForm = () => {\n    const isBlank = validateRequiredInput(name, email, description);\n    const isValidEmail = validateEmailFormat(email);\n\n    if (isBlank) {\n      alert('必須入力欄が空白です。');\n      return false;\n    } else if (!isValidEmail) {\n      alert('メールアドレスの書式が異なります。');\n      return false;\n    } else {\n      const payload = {\n        text: 'お問い合わせがありました\\n' + 'お名前:' + name + '\\n' + 'メールアドレス:' + email + '\\n' + '【問い合わせ内容】:\\n' + description\n      };\n      const url = 'https://hooks.slack.com/services/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';\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(payload)\n      }).then(() => {\n        alert('送信が完了しました。追ってご連絡します！');\n        setName(\"\");\n        setEmail(\"\");\n        setDescription(\"\");\n        return props.handleClose();\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: props.open,\n    onClose: props.handleClose,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"\\u304A\\u554F\\u3044\\u5408\\u308F\\u305B\\u30D5\\u30A9\\u30FC\\u30E0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        label: \"お名前(必須)\",\n        multiline: false,\n        rows: 1,\n        value: name,\n        type: \"text\",\n        onChange: inputName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        label: \"メールアドレス(必須)\",\n        multiline: false,\n        rows: 1,\n        value: email,\n        type: \"email\",\n        onChange: inputEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        label: \"お問い合わせ内容(必須)\",\n        multiline: true,\n        rows: 5,\n        value: description,\n        type: \"text\",\n        onChange: inputDescription\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: props.handleClose,\n        color: \"primary\",\n        children: \"\\u30AD\\u30E3\\u30F3\\u30BB\\u30EB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: submitForm,\n        color: \"primary\",\n        children: \"\\u9001\\u4FE1\\u3059\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, this);\n};\n\n_s(FormDialog, \"u17zzbdt6XUk1SIAPCVojQopDMA=\");\n\n_c = FormDialog;\nexport default FormDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormDialog\");","map":{"version":3,"sources":["C:/Users/hiro/react_project/react_search/react_search/frontend/src/chat-bot/chat-bot/src/components/Forms/FormDialog.jsx"],"names":["React","useState","useCallback","Button","Dialog","DialogActions","DialogContent","DialogTitle","TextInput","FormDialog","props","name","setName","email","setEmail","description","setDescription","inputName","event","target","value","inputEmail","inputDescription","validateEmailFormat","regex","test","validateRequiredInput","args","isBlank","i","length","submitForm","isValidEmail","alert","payload","text","url","fetch","method","body","JSON","stringify","then","handleClose","open"],"mappings":"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","sourcesContent":["import React, {useState, useCallback} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {TextInput} from './index';\r\n\r\nconst FormDialog = (props) => {\r\n    const[name, setName]=useState(\"\");\r\n    const[email, setEmail]=useState(\"\");\r\n    const[description, setDescription]=useState(\"\");\r\n    \r\n\r\n  const inputName = useCallback((event) => {\r\n    setName(event.target.value)\r\n  }, [setName])\r\n  const inputEmail = useCallback((event) => {\r\n    setEmail(event.target.value)\r\n  }, [setEmail])\r\n  const inputDescription = useCallback((event) => {\r\n    setDescription(event.target.value)\r\n  }, [setDescription])\r\n\r\nconst validateEmailFormat = (email) => {\r\n  const regex = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\r\n  return regex.test(email)\r\n}\r\n\r\nconst validateRequiredInput = (...args) => {\r\n  let isBlank = false;\r\n  for (let i = 0; i < args.length; i=(i+1)|0) {\r\n      if (args[i] === \"\") {\r\n          isBlank = true;\r\n      }\r\n  }\r\n  return isBlank\r\n};\r\n\r\n\r\nconst submitForm = () => {\r\n  const isBlank = validateRequiredInput(name, email, description)\r\n  const isValidEmail = validateEmailFormat(email)\r\n\r\n  if (isBlank) {\r\n    alert('必須入力欄が空白です。')\r\n    return false\r\n  } else if (!isValidEmail) {\r\n    alert('メールアドレスの書式が異なります。')\r\n    return false\r\n  } else {\r\n      const payload = {\r\n        text: 'お問い合わせがありました\\n' +\r\n              'お名前:' + name + '\\n' +\r\n              'メールアドレス:' + email + '\\n' +\r\n              '【問い合わせ内容】:\\n' + description\r\n      };\r\n\r\n    const url = 'https://hooks.slack.com/services/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'\r\n\r\n    fetch(url, {\r\n      method: 'POST',\r\n      body: JSON.stringify(payload)\r\n    }).then(() => {\r\n      alert('送信が完了しました。追ってご連絡します！')\r\n      setName(\"\")\r\n      setEmail(\"\")\r\n      setDescription(\"\")      \r\n      return props.handleClose()\r\n    })\r\n  }\r\n}\r\n    \r\n  \r\n    return(\r\n      <Dialog\r\n        open={props.open}\r\n        onClose={props.handleClose}\r\n      >\r\n        <DialogTitle>お問い合わせフォーム</DialogTitle>\r\n        <DialogContent>\r\n            <TextInput\r\n              label={\"お名前(必須)\"} multiline={false} rows={1}\r\n              value={name} type={\"text\"} onChange={inputName}\r\n            />\r\n            <TextInput\r\n              label={\"メールアドレス(必須)\"} multiline={false} rows={1}\r\n              value={email} type={\"email\"} onChange={inputEmail}\r\n            />\r\n            <TextInput\r\n              label={\"お問い合わせ内容(必須)\"} multiline={true} rows={5}\r\n              value={description} type={\"text\"} onChange={inputDescription}\r\n            />\r\n\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={props.handleClose} color=\"primary\">\r\n            キャンセル\r\n          </Button>\r\n          <Button onClick={submitForm} color=\"primary\">\r\n            送信する\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n}\r\n  \r\nexport default FormDialog"]},"metadata":{},"sourceType":"module"}